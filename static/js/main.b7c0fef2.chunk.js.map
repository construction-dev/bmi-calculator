{"version":3,"sources":["components/FormInput.js","components/BmiCalculator.js","components/BMI.js","App.js","index.js"],"names":["FormInput","props","name","type","title","value","onChange","className","autoComplete","BmiCalculator","useState","heightUnit","setHeightUnit","weightUnit","setWeightUnit","unit","setUnit","heightCount","inchesCount","weightCount","count","setCount","useEffect","metricBMI","imperialBMI","onChangeInput","event","target","prevState","height","weight","bmi","Math","pow","console","log","getBmiValue","round","inches","parseInt","id","onClick","preventDefault","BMI","bmiValue","setBmiValue","bmiCategory","bmiClass","split","toLowerCase","bmiBackgroundColor","style","backgroundColor","color","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7c0fef2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FormInput = (props) => {\r\n  const { name, type, title, value, onChange } = props;\r\n\r\n  return (\r\n    <div className=\"input-groups\">\r\n      <span className=\"label\">{title}</span>\r\n      <div className=\"range-container\">\r\n        <input\r\n          type={type}\r\n          name={name}\r\n          className=\"range-input\"\r\n          value={value}\r\n          onChange={onChange}\r\n          autoComplete=\"off\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nFormInput.propTypes = {\r\n    title: PropTypes.string,\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    type: PropTypes.oneOf(['text'])\r\n};\r\n\r\nexport default FormInput;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport FormInput from \"./FormInput\";\r\n\r\nconst BmiCalculator = (props) => {\r\n  //can destructor the props like below so that in the rest of the method/function the props. does not need to be used, but the props. does make it clearer so not destructored here.\r\n  //const { getBmiValue } = props;\r\n\r\n  const [heightUnit, setHeightUnit] = useState(\"cm\");\r\n  const [weightUnit, setWeightUnit] = useState(\"kg\");\r\n  const [unit, setUnit] = useState(\"Metric\");\r\n\r\n  //A way of setting defaults, but setting the default in the useState seems to be be better/\r\n  // useEffect(() => {\r\n  //   if (unit === \"\") {\r\n  //     setUnit(\"Metric\");\r\n  //     setHeightUnit(\"cm\");\r\n  //     setWeightUnit(\"kg\");\r\n  //   }\r\n  //   console.log(unit);\r\n  // }, [unit]);\r\n\r\n  const [count, setCount] = useState({\r\n    heightCount: \"0\",\r\n    inchesCount: \"0\",\r\n    weightCount: \"0\",\r\n  });\r\n\r\n  //Below is object destructuring so that weightCount etc can be used without\r\n  //the count. in front, although I don't see the problem with using the count.\r\n  //in front as it makes it clear.\r\n  const { heightCount, inchesCount, weightCount } = count;\r\n\r\n  useEffect(() => {\r\n    metricBMI(heightCount, weightCount);\r\n    imperialBMI(heightCount, weightCount, inchesCount);\r\n    // eslint-disable-next-line\r\n  }, [heightCount, weightCount, inchesCount]);\r\n\r\n  const onChangeInput = (event) => {\r\n    //destructure the name and value from the target object within the event object\r\n    const { name, value } = event.target;\r\n    setCount((prevState) => ({\r\n      //The prevstate is used to fix the controlled to uncontrolled error, by\r\n      //passing the previous default values before setting the new values\r\n      ...prevState,\r\n      \r\n      //gets value from the input with the name property set in its name.  So if\r\n      //the inputs names is inchesCount then this would be inchesCount: value as\r\n      //the value is destructured from event.target.  could also write\r\n      //event.target.name without destructuring.\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const onSelectTag = (event) => {\r\n    setUnit(event.target.value);\r\n    if (event.target.value === \"Metric\") {\r\n      setHeightUnit(\"cm\");\r\n      setWeightUnit(\"kg\");\r\n    } else {\r\n      setHeightUnit(\"ft\");\r\n      setWeightUnit(\"lbs\");\r\n    }\r\n  };\r\n\r\n  const metricBMI = (height, weight) => {\r\n    if (height > 0 && weight > 0) {\r\n      const bmi = weight / Math.pow(height / 100, 2);\r\n      console.log(bmi);\r\n      props.getBmiValue(Math.round(bmi));\r\n    }\r\n  };\r\n\r\n  const imperialBMI = (height, weight, inches) => {\r\n    if (height > 0 && weight > 0 && inches > 0) {\r\n      //converting height in ft to inches value\r\n      const bmi = (weight / Math.pow(height * 12 + parseInt(inches), 2)) * 703;\r\n      props.getBmiValue(Math.round(bmi));\r\n    }\r\n  };\r\n\r\n  const resetData = (event) => {\r\n    event.preventDefault();\r\n    props.getBmiValue(0);\r\n    setUnit(\"Metric\");\r\n    setCount({\r\n      heightCount: \"0\",\r\n      inchesCount: \"0\",\r\n      weightCount: \"0\",\r\n    });\r\n    setHeightUnit(\"cm\");\r\n    setWeightUnit(\"kg\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"bmi-inputs\">\r\n        <div className=\"inputs-fields\">\r\n          <div>\r\n            <span className=\"label-unit\">Unit</span>\r\n            <div className=\"unit\">\r\n              <select\r\n                name=\"unit\"\r\n                id=\"\"\r\n                value={unit}\r\n                className=\"form-control form-control-sm\"\r\n                onChange={onSelectTag}\r\n              >\r\n                <option value=\"Metric\">Metric</option>\r\n                <option value=\"Imperial\">Imperial</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <FormInput\r\n            type=\"text\"\r\n            name=\"heightCount\"\r\n            title={`Height (${heightUnit})`}\r\n            value={heightCount}\r\n            onChange={onChangeInput}\r\n          />\r\n          {unit === \"Imperial\" ? (\r\n            <FormInput\r\n              type=\"text\"\r\n              name=\"inchesCount\"\r\n              title={`Height (inch)`}\r\n              value={inchesCount}\r\n              onChange={onChangeInput}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <FormInput\r\n            type=\"text\"\r\n            name=\"weightCount\"\r\n            title={`Weight (${weightUnit})`}\r\n            value={weightCount}\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n        <button className=\"button\" type=\"submit\" onClick={resetData}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BmiCalculator;\r\n","import React, { useState } from \"react\";\r\nimport BmiCalculator from \"./BmiCalculator\";\r\n\r\nconst BMI = () => {\r\n  const [bmiValue, setBmiValue] = useState(0);\r\n\r\n  //get BMI category text\r\n  const getBmiClass = (bmi) => {\r\n    if (bmi >= 1 && bmi <= 18.5) return \"Underweight\";\r\n    if (bmi > 18.5 && bmi <= 24.9) return \"Normal Weight\";\r\n    if (bmi > 24.9 && bmi <= 29.9) return \"Overweight\";\r\n    if (bmi > 29.9) return \"Obese\";\r\n  };\r\n\r\n  //set BMI category text\r\n  const bmiCategory = getBmiClass(bmiValue);\r\n  // console.log(bmiCategory);\r\n\r\n  //Changing BMI Category Color based on category text, but converting text to match class name\r\n  //Define var and set to empty string to allow check is it exists or has been blanked out.\r\n  let bmiClass = \"\";\r\n  // && bmiCategory check is it is NOT empty \"\" or undefined, because if it was\r\n  // either of these then the value would be false, but as soon as the var holds\r\n  // a value it would be true\r\n  if (bmiValue > 1 && bmiCategory) {\r\n    //split the string in BmI Category with space.  Will go into array, then\r\n    //grab first index item at index 0 and convert to lowercase.  This will no\r\n    //match te classname in the App.css\r\n    bmiClass = bmiCategory.split(\" \")[0].toLowerCase();\r\n    console.log(bmiClass);\r\n  }\r\n\r\n  const bmiBackgroundColor = (bmi) => {\r\n    if (bmi >= 1 && bmi <= 18.5) return \"#FED88B\";\r\n    if (bmi > 18.5 && bmi <= 24.9) return \"#80ff80\";\r\n    if (bmi > 24.9 && bmi <= 29.9) return \"#FF7F50\";\r\n    if (bmi > 29.9) return \"#FF5411\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"calculator\"\r\n        style={{ backgroundColor: bmiBackgroundColor(bmiValue) }}\r\n      >\r\n        <h3>A Body Mass Index Calculator</h3>\r\n        <div className=\"bmi-result-container\">\r\n          <div className=\"bmi-result\">\r\n            <div className=\"bmi-result-number\">\r\n              <h4 style={{ color: bmiBackgroundColor(bmiValue) }}>\r\n                Body Mass Index (BMI) = {bmiValue}{\" \"}\r\n              </h4>\r\n            </div>\r\n            {/* below the {} converts the classname to code, which allows use of the back tics `` (template literals)\r\n             and then with the $ allows insertion of dynamic classname */}\r\n            <h5 className={`bmi-category ${bmiClass}`}>{bmiCategory}</h5>\r\n          </div>\r\n        </div>\r\n        <BmiCalculator getBmiValue={setBmiValue} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BMI;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport BMI from \"./components/BMI\";\n\nconst App = () => {\n  return (\n    <div className=\"App container\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-lg-6 col-lg-offset-3\">\n          <BMI />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}